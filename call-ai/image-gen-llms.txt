# call-ai Image Generation API Documentation

## Overview

The call-ai library includes image generation capabilities through the `imageGen` function, which integrates with a custom image generation API. This functionality supports both simple image generation from text prompts and image editing with multiple input images.

## Getting Started

Import the `imageGen` function:

```javascript
import { imageGen } from 'call-ai';
```

## Basic Usage

### Simple Image Generation

Generate an image from a text prompt:

```javascript
const generateResponse = await imageGen(
  'A children\'s book drawing of a veterinarian using a stethoscope to listen to the heartbeat of a baby otter.'
);

// Access the base64-encoded image
const imageBase64 = generateResponse.data[0].b64_json;

// Use in an HTML element
const imgElement = document.createElement('img');
imgElement.src = `data:image/png;base64,${imageBase64}`;
document.body.appendChild(imgElement);

// Error handling is built-in
try {
  const result = await imageGen('Your prompt');
} catch (error) {
  // All errors are proper Error objects with descriptive messages
  console.error(error.message);
}
```

### Image Editing with Multiple Input Images

Edit or combine multiple images with a text prompt:

```javascript
// Get image files (e.g., from a file input)
const imageFiles = [bathBombFile, bodyLotionFile, incenseKitFile, soapFile];

// Request image editing
// Uses the same async pattern as callAi for consistency
const editResponse = await imageGen(
  'Create a lovely gift basket with these four items in it',
  {
    model: 'gpt-image-1',
    images: imageFiles,
    size: '1024x1024', // optional
    quality: 'hd', // optional
    style: 'natural' // optional
  }
);

// Access the base64-encoded edited image
const editedImageBase64 = editResponse.data[0].b64_json;

// Use in an HTML element
const editedImg = document.createElement('img');
editedImg.src = `data:image/png;base64,${editedImageBase64}`;
document.body.appendChild(editedImg);
```

## API Reference

### `imageGen(prompt, options)`

Generates or edits images based on a text prompt and optional images.

#### Parameters

- `prompt` (string, required): Text prompt describing the desired image
- `options` (object, optional): Configuration options
  - `model` (string, optional): Model to use for image generation, defaults to 'gpt-image-1'
  - `apiKey` (string, optional): API key, defaults to 'VIBES_DIY'
  - `images` (File[], optional): Array of File objects to edit, if provided uses the edit endpoint
  - `size` (string, optional): Size of the generated image (Must be one of 1024x1024, 1536x1024 (landscape), 1024x1536 (portrait), or 'auto' (default value) for gpt-image-1, and one of 256x256, 512x512, or 1024x1024 for dall-e-2.)
  - `quality` (string, optional): Quality of the generated image (high, medium and low are only supported for gpt-image-1. dall-e-2 only supports standard quality. Defaults to auto.)
  - `style` (string, optional): Style of the generated image (e.g., 'vivid', 'natural') for dall-e-2 only.
  - `debug` (boolean, optional): Enable debug logging, defaults to false

#### Returns

Returns a Promise that resolves to an `ImageResponse` object:

```typescript
interface ImageResponse {
  created: number;
  data: {
    b64_json: string;
    url?: string;
    revised_prompt?: string;
  }[];
}
```

## Implementation Details

The image generation functionality uses two custom API endpoints:

- `/api/openai-image/generate`: For simple image generation with a text prompt
- `/api/openai-image/edit`: For editing/combining multiple images with a text prompt

These endpoints return base64-encoded image data that can be directly used in HTML `<img>` tags or saved as files. All API calls use proper async/await patterns for consistent error handling across the library.

## Error Handling

The `imageGen` function includes proper error handling and will throw Error objects with descriptive messages, consistent with the rest of the call-ai library:

```javascript
try {
  const result = await imageGen('An impossible prompt', { debug: true });
  // Use the result...
} catch (error) {
  // Error objects include useful properties
  console.error('Image generation failed:', error.message);
  
  // Access additional properties if available
  if ('status' in error) console.error('Status code:', error.status);
  if ('errorType' in error) console.error('Error type:', error.errorType);
  if ('details' in error) console.error('Details:', error.details);
  
  // Handle the error appropriately
}
```

## Helper Functions

### Converting Base64 to File

To save the generated image as a file:

```javascript
function base64ToFile(base64Data, filename = 'generated-image.png', mimeType = 'image/png') {
  // Remove data URL prefix if present
  const base64Content = base64Data.includes('base64,') 
    ? base64Data.split('base64,')[1] 
    : base64Data;
    
  // Convert base64 to binary
  const binaryStr = atob(base64Content);
  
  // Create array buffer
  const bytes = new Uint8Array(binaryStr.length);
  for (let i = 0; i < binaryStr.length; i++) {
    bytes[i] = binaryStr.charCodeAt(i);
  }
  
  // Create blob and file
  const blob = new Blob([bytes], { type: mimeType });
  return new File([blob], filename, { type: mimeType });
}

// Usage
const imageFile = base64ToFile(imageResponse.data[0].b64_json, 'my-image.png');
```

## Browser Compatibility

This functionality is designed to work in modern browsers and requires:

- `fetch` API
- `FormData` API
- `File` and `Blob` APIs
- Support for async/await

These are available in all modern browsers without polyfills.

## TypeScript Support

The `imageGen` function is fully typed with TypeScript interfaces:

```typescript
// Input options interface
interface ImageGenOptions {
  apiKey?: string;
  model?: string;
  images?: File[];
  size?: string;
  quality?: string;
  style?: string;
  debug?: boolean;
}

// Response interface
interface ImageResponse {
  created: number;
  data: {
    b64_json: string;
    url?: string;
    revised_prompt?: string;
  }[];
}

// Function signature
declare function imageGen(prompt: string, options?: ImageGenOptions): Promise<ImageResponse>;
```
