--- /dev/null
--- a/README.md
--- a/jest.config.js
-  testMatch: ['**/*.test.ts'],
--- a/package-lock.json
-  "version": "0.1.5",
-      "version": "0.1.5",
-      "license": "MIT",
--- a/package.json
--- a/src/index.ts
-  const model = options.model || 'openrouter/auto';
-  const messages = Array.isArray(prompt) 
-      // Handle schema if provided
-      ...(schema && { 
-            type: 'object',
-            properties: schema.properties || {},
-            required: schema.required || Object.keys(schema.properties || {}),
-            additionalProperties: schema.additionalProperties !== undefined 
-              ? schema.additionalProperties 
-              : false,
-            // Copy any additional schema properties (excluding properties we've already handled)
-            ...Object.fromEntries(
-              Object.entries(schema).filter(([key]) => 
-                !['name', 'properties', 'required', 'additionalProperties'].includes(key)
-            )
--- /dev/null
--- /dev/null
--- a/src/index.test.ts
-import { callAi, Message, Schema } from './index';
-    expect(body.response_format.json_schema.required).toEqual(['name']);
-    const result = await callAi('Give me a todo list for learning React', options);
-    expect(result).toBe('{"todos": ["Learn React basics", "Build a simple app", "Master hooks"]}');
-    expect(body.response_format.json_schema.properties).toEqual(todoSchema.properties);
-    expect(body.response_format.json_schema.properties).toEqual(alienSchema.properties);
-    expect(body.response_format.json_schema.properties).toEqual({});
-    expect(body.response_format.json_schema.required).toEqual([]);
-    expect(body.response_format.json_schema.additionalProperties).toBe(true);
