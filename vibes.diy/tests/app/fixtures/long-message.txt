{"dependencies": {}}

Here's a photo gallery app with a grid of images and a modal view. Users can upload photos with descriptions, view them in a modal, and delete them.

```jsx
import React, { useState } from "react";
import { useFireproof, ImgFile } from "use-fireproof";

export default function App() {
  const { useDocument, useLiveQuery, database } = useFireproof("photo-gallery");
  const { doc, merge, submit, reset } = useDocument({ _files: {}, title: "", description: "" });
  const { docs } = useLiveQuery("createdAt", { descending: true });
  const [selectedImage, setSelectedImage] = useState(null);
  const [dragActive, setDragActive] = useState(false);

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const file = e.dataTransfer.files[0];
      if (file.type.startsWith("image/")) {
        merge({ _files: { image: file }, createdAt: Date.now() });
      }
    }
  };

  const handleFileChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      merge({ _files: { image: e.target.files[0] }, createdAt: Date.now() });
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!doc._files.image) return;
    submit();
  };

  const addDemoData = async () => {
    const demoImages = [
      { title: "Sunset", description: "Beautiful sunset at the beach" },
      { title: "Mountains", description: "Breathtaking mountain view" },
      { title: "City Lights", description: "Night city skyline" },
      { title: "Forest", description: "Peaceful forest path" },
      { title: "Lake", description: "Calm lake at dawn" },
    ];
    
    for (let i = 0; i < demoImages.length; i++) {
      const image = demoImages[i];
      await database.put({
        title: image.title,
        description: image.description,
        createdAt: Date.now() - i * 60000,
        _files: { image: `https://picsum.photos/seed/${i}/500/300` }
      });
    }
  };

  return (
    <div className="max-w-7xl mx-auto p-6 bg-gray-100 min-h-screen">
      <div className="bg-orange-800 text-white p-5 rounded-lg mb-8 shadow-lg">
        <h1 className="text-3xl font-bold mb-2">Synthwave Photo Gallery</h1>
        <p className="italic">
          <em>This app allows you to create your own retro-themed photo gallery. Upload images by dragging and dropping them or using the file picker, add titles and descriptions, then view them in a stylish modal by clicking on any image. You can also delete images you no longer want in your collection.</em>
        </p>
      </div>

      <div className="flex flex-col md:flex-row gap-8 mb-8">
        <div className="w-full md:w-1/3 bg-orange-100 p-5 rounded-lg shadow-md">
          <h2 className="text-2xl font-bold mb-4 text-orange-800">Upload New Photo</h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div 
              className={`border-2 border-dashed p-10 text-center rounded-lg cursor-pointer transition-colors ${dragActive ? 'border-orange-500 bg-orange-100' : 'border-orange-300'}`}
              onDragEnter={handleDrag}
              onDragLeave={handleDrag}
              onDragOver={handleDrag}
              onDrop={handleDrop}
              onClick={() => document.getElementById('file-input').click()}
            >
              {doc._files.image ? (
                <div className="text-green-600 font-medium">Image ready to upload</div>
              ) : (
                <div className="text-orange-700">
                  <p className="font-medium">Drag & drop an image here or click to select</p>
                </div>
              )}
              <input 
                type="file" 
                id="file-input"
                onChange={handleFileChange}
                accept="image/*"
                className="hidden"
              />
            </div>
            
            <div>
              <label className="block text-orange-800 mb-1">Title</label>
              <input
                type="text"
                value={doc.title}
                onChange={e => merge({ title: e.target.value })}
                className="w-full p-2 border border-orange-300 rounded"
                placeholder="Enter a title for your photo"
              />
            </div>
            
            <div>
              <label className="block text-orange-800 mb-1">Description</label>
              <textarea
                value={doc.description}
                onChange={e => merge({ description: e.target.value })}
                className="w-full p-2 border border-orange-300 rounded"
                placeholder="Enter a description"
                rows={3}
              />
            </div>
            
            <button 
              type="submit"
              className="w-full bg-orange-600 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded transition"
            >
              Upload Photo
            </button>
          </form>
          
          <button 
            onClick={addDemoData}
            className="w-full bg-orange-400 hover:bg-orange-500 text-white font-bold py-2 px-4 rounded transition mt-4"
          >
            Demo Data
          </button>
        </div>
        
        <div className="w-full md:w-2/3">
          <h2 className="text-2xl font-bold mb-4 text-orange-800">Your Gallery</h2>
          {docs.length === 0 ? (
            <div className="text-center py-10 bg-white rounded-lg shadow">
              <p className="text-orange-700">No photos yet. Upload some images or add demo data!</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {docs.map(photo => (
                <div 
                  key={photo._id} 
                  className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-xl transition-shadow cursor-pointer"
                  onClick={() => setSelectedImage(photo)}
                >
                  <div className="aspect-w-4 aspect-h-3 relative h-48">
                    {photo._files?.image && (
                      typeof photo._files.image === 'string' ? (
                        <img 
                          src={photo._files.image} 
                          alt={photo.title || 'Gallery image'}
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <ImgFile 
                          file={photo._files.image} 
                          alt={photo.title || 'Gallery image'} 
                          className="w-full h-full object-cover" 
                        />
                      )
                    )}
                  </div>
                  <div className="p-3">
                    <h3 className="text-lg font-semibold text-orange-800 truncate">{photo.title || 'Untitled'}</h3>
                    <p className="text-gray-600 text-sm line-clamp-2">{photo.description || 'No description'}</p>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
      
      {/* Image Modal */}
      {selectedImage && (
        <div className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 p-4" onClick={() => setSelectedImage(null)}>
          <div className="bg-white rounded-lg max-w-3xl w-full max-h-[90vh] overflow-hidden" onClick={e => e.stopPropagation()}>
            <div className="relative">
              <div className="aspect-w-16 aspect-h-9 max-h-[60vh]">
                {selectedImage._files?.image && (
                  typeof selectedImage._files.image === 'string' ? (
                    <img 
                      src={selectedImage._files.image} 
                      alt={selectedImage.title || 'Gallery image'}
                      className="w-full h-full object-contain"
                    />
                  ) : (
                    <ImgFile 
                      file={selectedImage._files.image} 
                      alt={selectedImage.title || 'Gallery image'} 
                      className="w-full h-full object-contain" 
                    />
                  )
                )}
              </div>
              <button 
                className="absolute top-2 right-2 bg-black bg-opacity-70 text-white rounded-full w-8 h-8 flex items-center justify-center"
                onClick={() => setSelectedImage(null)}
              >
                Ã—
              </button>
            </div>
            <div className="p-4">
              <div className="flex justify-between items-center mb-2">
                <h3 className="text-xl font-bold text-orange-800">{selectedImage.title || 'Untitled'}</h3>
                <button 
                  className="bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded text-sm"
                  onClick={() => {
                    database.del(selectedImage._id);
                    setSelectedImage(null);
                  }}
                >
                  Delete
                </button>
              </div>
              <p className="text-gray-700">{selectedImage.description || 'No description'}</p>
              <p className="text-xs text-gray-500 mt-2">
                Added on {new Date(selectedImage.createdAt).toLocaleString()}
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
```

This app features:

- Drag and drop file uploads with Fireproof's _files API
- A responsive image grid with titles and descriptions
- A modal view for viewing image details
- Delete functionality
- Demo data button to populate sample images
- Orange synthwave styling with Tailwind
- Clear instructions for users

The app uses Fireproof for data persistence and real-time updates, sorting images by creation date in descending order.