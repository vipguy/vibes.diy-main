{"dependencies": {}}

Here's a todo app with due dates and task completion tracking. It uses Fireproof to persist the data and provide real-time updates.

```js
import React, { useState } from "react";
import { useFireproof } from "use-fireproof";

export default function TodoApp() {
  const { database, useDocument, useLiveQuery } = useFireproof("todo-app-database");
  const [filter, setFilter] = useState("all"); // all, active, completed
  const [sortBy, setSortBy] = useState("dueDate"); // dueDate, createdAt

  // New todo form
  const { doc: newTodo, merge: updateNewTodo, submit: submitNewTodo, reset } = useDocument({
    title: "",
    description: "",
    dueDate: new Date().toISOString().split("T")[0],
    completed: false,
    createdAt: Date.now(),
    type: "todo"
  });

  // Query todos based on filter
  const { docs: todos } = useLiveQuery((doc) => {
    if (doc.type !== "todo") return;
    
    if (filter === "active" && doc.completed) return;
    if (filter === "completed" && !doc.completed) return;
    
    return sortBy === "dueDate" ? [doc.dueDate, doc._id] : [doc.createdAt, doc._id];
  });

  // Toggle todo completion
  const toggleComplete = (todo) => {
    database.put({ ...todo, completed: !todo.completed });
  };

  // Delete todo
  const deleteTodo = (id) => {
    database.del(id);
  };

  // Add demo data
  const addDemoData = async () => {
    const now = Date.now();
    const day = 24 * 60 * 60 * 1000;
    
    await database.put({
      type: "todo",
      title: "Complete project",
      description: "Finish the React project by deadline",
      dueDate: new Date(now + 3 * day).toISOString().split("T")[0],
      completed: false,
      createdAt: now
    });
    
    await database.put({
      type: "todo",
      title: "Buy groceries",
      description: "Milk, eggs, bread, fruits",
      dueDate: new Date(now + day).toISOString().split("T")[0],
      completed: false,
      createdAt: now + 1
    });
    
    await database.put({
      type: "todo",
      title: "Call mom",
      description: "Weekly call with mom",
      dueDate: new Date(now).toISOString().split("T")[0],
      completed: true,
      createdAt: now + 2
    });
  };

  return (
    <div className="max-w-2xl mx-auto p-6 bg-gradient-to-br from-orange-50 to-amber-100 min-h-screen">
      <h1 className="text-4xl font-bold text-orange-600 mb-6 text-center">Todo App</h1>
      
      <div className="mb-6 text-center">
        <p className="text-orange-800 italic mb-4">
          *This app helps you manage your tasks with due dates and completion status. Add new todos with the form below, mark them as complete with the checkbox, and delete them when no longer needed. Use the filters to view all, active, or completed todos.*
        </p>
        <button 
          onClick={addDemoData}
          className="bg-orange-500 hover:bg-orange-600 text-white px-4 py-2 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105"
        >
          Demo Data
        </button>
      </div>
      
      {/* Add Todo Form */}
      <form 
        onSubmit={(e) => {
          e.preventDefault();
          submitNewTodo();
        }}
        className="bg-white p-5 rounded-xl shadow-md mb-6"
      >
        <h2 className="text-2xl font-semibold text-orange-700 mb-4">Add New Todo</h2>
        <div className="mb-4">
          <label className="block text-orange-800 mb-1">Title</label>
          <input
            type="text"
            value={newTodo.title}
            onChange={(e) => updateNewTodo({ title: e.target.value })}
            className="w-full p-2 border border-orange-300 rounded focus:outline-none focus:ring-2 focus:ring-orange-500"
            required
          />
        </div>
        
        <div className="mb-4">
          <label className="block text-orange-800 mb-1">Description</label>
          <textarea
            value={newTodo.description}
            onChange={(e) => updateNewTodo({ description: e.target.value })}
            className="w-full p-2 border border-orange-300 rounded focus:outline-none focus:ring-2 focus:ring-orange-500"
          />
        </div>
        
        <div className="mb-4">
          <label className="block text-orange-800 mb-1">Due Date</label>
          <input
            type="date"
            value={newTodo.dueDate}
            onChange={(e) => updateNewTodo({ dueDate: e.target.value })}
            className="w-full p-2 border border-orange-300 rounded focus:outline-none focus:ring-2 focus:ring-orange-500"
            required
          />
        </div>
        
        <button 
          type="submit"
          className="w-full bg-orange-600 hover:bg-orange-700 text-white p-2 rounded font-semibold"
        >
          Add Todo
        </button>
      </form>
      
      {/* Filters & Sorting */}
      <div className="flex flex-wrap justify-between items-center mb-4 bg-orange-200 p-3 rounded-lg">
        <div className="space-x-2">
          <button 
            onClick={() => setFilter("all")}
            className={`px-3 py-1 rounded ${filter === "all" ? "bg-orange-600 text-white" : "bg-orange-100 hover:bg-orange-300"}`}
          >
            All
          </button>
          <button 
            onClick={() => setFilter("active")}
            className={`px-3 py-1 rounded ${filter === "active" ? "bg-orange-600 text-white" : "bg-orange-100 hover:bg-orange-300"}`}
          >
            Active
          </button>
          <button 
            onClick={() => setFilter("completed")}
            className={`px-3 py-1 rounded ${filter === "completed" ? "bg-orange-600 text-white" : "bg-orange-100 hover:bg-orange-300"}`}
          >
            Completed
          </button>
        </div>
        
        <div className="mt-2 sm:mt-0">
          <select 
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value)}
            className="p-1 border border-orange-300 rounded bg-white"
          >
            <option value="dueDate">Sort by Due Date</option>
            <option value="createdAt">Sort by Created Date</option>
          </select>
        </div>
      </div>
      
      {/* Todo List */}
      <div className="space-y-3">
        {todos.length === 0 ? (
          <p className="text-center text-orange-800 py-6">No todos found. Add some!</p>
        ) : (
          todos.map(todo => (
            <div 
              key={todo._id} 
              className={`bg-white p-4 rounded-lg shadow-md border-l-4 ${
                todo.completed ? "border-green-500" : 
                new Date(todo.dueDate) < new Date() ? "border-red-500" : "border-orange-500"
              }`}
            >
              <div className="flex items-start justify-between">
                <div className="flex items-start space-x-3">
                  <input
                    type="checkbox"
                    checked={todo.completed}
                    onChange={() => toggleComplete(todo)}
                    className="mt-1 h-5 w-5 text-orange-600 rounded"
                  />
                  <div>
                    <h3 className={`font-semibold text-lg ${todo.completed ? "line-through text-gray-500" : "text-orange-900"}`}>
                      {todo.title}
                    </h3>
                    <p className="text-orange-700">{todo.description}</p>
                    <p className={`text-sm ${
                      new Date(todo.dueDate) < new Date() && !todo.completed ? "text-red-600 font-semibold" : "text-orange-600"
                    }`}>
                      Due: {new Date(todo.dueDate).toLocaleDateString()}
                    </p>
                  </div>
                </div>
                <button
                  onClick={() => deleteTodo(todo._id)}
                  className="text-red-500 hover:text-red-700"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                </button>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
}
```

This todo app features:

1. Add todos with titles, descriptions, and due dates
2. Mark todos as complete/incomplete with a checkbox
3. Delete todos
4. Filter todos by status (all, active, completed)
5. Sort todos by due date or creation date
6. Visual indicators for overdue tasks
7. A demo data button to populate example todos
8. Real-time updates using Fireproof's useLiveQuery
9. Persistent storage across sessions

The app uses Fireproof for data persistence and reactivity, making it work offline and sync automatically.