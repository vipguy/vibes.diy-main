diff --git a/app/components/ResultPreview/IframeContent.tsx b/app/components/ResultPreview/IframeContent.tsx
index 9d51940..d3feef4 100644
--- a/app/components/ResultPreview/IframeContent.tsx
+++ b/app/components/ResultPreview/IframeContent.tsx
@@ -4,17 +4,18 @@ import { CALLAI_API_KEY } from '~/config/env';
 import Editor from '@monaco-editor/react';
 import { shikiToMonaco } from '@shikijs/monaco';
 import { createHighlighter } from 'shiki';
+import { DatabaseListView } from './DataView';
 
 // Import the iframe template using Vite's ?raw import option
 import iframeTemplateRaw from './templates/iframe-template.html?raw';
 
 interface IframeContentProps {
-  activeView: 'preview' | 'code';
+  activeView: 'preview' | 'code' | 'data';
   filesContent: IframeFiles;
   isStreaming: boolean;
   codeReady: boolean;
   sandpackKey: string;
-  setActiveView: (view: 'preview' | 'code') => void;
+  setActiveView: (view: 'preview' | 'code' | 'data') => void;
   setBundlingComplete: (complete: boolean) => void;
   dependencies: Record<string, string>;
   isDarkMode: boolean; // Add isDarkMode prop
@@ -46,8 +47,8 @@ const IframeContent: React.FC<IframeContentProps> = ({
   const userScrolledRef = useRef<boolean>(false);
   // Store the last scroll top position to detect user-initiated scrolls
   const lastScrollTopRef = useRef<number>(0);
-  // Store the last viewport height
-  const lastViewportHeightRef = useRef<number>(0);
+  // Store the last viewport height (keeping for future use)
+  // const lastViewportHeightRef = useRef<number>(0);
 
   // Theme detection is now handled in the parent component
 
@@ -201,138 +202,78 @@ const IframeContent: React.FC<IframeContentProps> = ({
             wordWrap: 'on',
             padding: { top: 16 },
           }}
-          onMount={async (editor, monacoInstance: any) => {
-            // Store references for theme updates
-            monacoEditorRef.current = monacoInstance.editor;
-
-            // Set up throttled scrolling to bottom when streaming code
-            if (isStreaming && !codeReady) {
-              let lastScrollTime = 0;
-              const scrollThrottleMs = 30; // Fixed throttle time of 30ms
-
-              // Initialize with current time and positions
-              lastScrollTime = Date.now();
-              const initialScrollTop = editor.getScrollTop();
-              lastScrollTopRef.current = initialScrollTop;
-              lastViewportHeightRef.current = editor.getLayoutInfo().height;
-
-              // Track if editor is fully initialized
-              let editorInitialized = false;
-              // Longer delay to ensure full initialization
-              setTimeout(() => {
-                editorInitialized = true;
-                // Update the baseline scroll position after initialization
-                lastScrollTopRef.current = editor.getScrollTop();
-              }, 1000);
-
-              // Detect only genuine user-initiated scrolling
-              const scrollDisposable = editor.onDidScrollChange((e) => {
-                if (!editorInitialized || userScrolledRef.current) {
-                  // Skip if not initialized or already detected user scroll
-                  return;
-                }
-
-                const currentTime = Date.now();
-                const timeSinceAutoScroll = currentTime - lastScrollTime;
-                const currentScrollTop = e.scrollTop;
-                const currentViewportHeight = editor.getLayoutInfo().height;
-
-                // Check for significant viewport height changes (e.g., window resize)
-                const viewportChanged =
-                  Math.abs(currentViewportHeight - lastViewportHeightRef.current) > 5;
-                if (viewportChanged) {
-                  // If viewport changed, update reference and skip this event
-                  lastViewportHeightRef.current = currentViewportHeight;
-                  return;
-                }
-
-                // Only detect as manual scroll if:
-                // 1. Not too close to our auto-scroll action (at least 200ms after)
-                // 2. Not close to initialization
-                // 3. Scrolled a significant amount from last position
-                const scrollDelta = Math.abs(currentScrollTop - lastScrollTopRef.current);
-                if (timeSinceAutoScroll > 200 && scrollDelta > 20) {
-                  userScrolledRef.current = true;
-                }
-
-                // Update last scroll position for next comparison
-                lastScrollTopRef.current = currentScrollTop;
-              });
-
-              // Auto-scroll on content change, but only if user hasn't manually scrolled
-              const contentDisposable = editor.onDidChangeModelContent(() => {
-                const now = Date.now();
-                if (now - lastScrollTime > scrollThrottleMs && !userScrolledRef.current) {
-                  lastScrollTime = now;
-
-                  // Get the model and scroll to the last line
-                  const model = editor.getModel();
-                  if (model) {
-                    const lineCount = model.getLineCount();
-                    editor.revealLineNearTop(lineCount);
-                  }
-                }
-              });
-
-              // Create a cleanup event listener
-              const editorDisposable = editor.onDidDispose(() => {
-                scrollDisposable.dispose();
-                contentDisposable.dispose();
-              });
-
-              // Store disposables in the ref for cleanup
-              disposablesRef.current.push(scrollDisposable, contentDisposable, editorDisposable);
-            }
-
-            // Configure JavaScript language to support JSX
-            monacoInstance.languages.typescript.javascriptDefaults.setCompilerOptions({
-              jsx: monacoInstance.languages.typescript.JsxEmit.React,
-              jsxFactory: 'React.createElement',
-              reactNamespace: 'React',
-              allowNonTsExtensions: true,
-              allowJs: true,
-              target: monacoInstance.languages.typescript.ScriptTarget.Latest,
-            });
-
-            // Set editor options for better visualization
-            editor.updateOptions({
-              tabSize: 2,
-              bracketPairColorization: { enabled: true },
-              guides: { bracketPairs: true },
-            });
-
-            try {
-              // Register the language IDs first
-              monacoInstance.languages.register({ id: 'jsx' });
-              monacoInstance.languages.register({ id: 'javascript' });
-
-              // Create the Shiki highlighter with both light and dark themes, prioritize dark
-              const highlighter = await createHighlighter({
-                themes: ['github-dark', 'github-light'],
-                langs: ['javascript', 'jsx'],
-              });
-
-              // Store highlighter reference for theme switching
+          onMount={(editor, monaco) => {
+            // Store the editor instance for later reference
+            monacoEditorRef.current = editor;
+
+            // Set up Shiki highlighter for better syntax highlighting
+            createHighlighter({
+              themes: [isDarkMode ? 'github-dark' : 'github-light'],
+              langs: ['javascript', 'typescript', 'jsx', 'tsx'],
+            }).then(async (highlighter) => {
               highlighterRef.current = highlighter;
 
-              // Apply Shiki to Monaco
-              shikiToMonaco(highlighter, monacoInstance);
+              try {
+                // Apply Shiki syntax highlighting to Monaco
+                await shikiToMonaco(highlighter, monaco);
+
+                // Add a simple disposable for cleanup
+                disposablesRef.current.push({
+                  dispose: () => {
+                    // Basic cleanup function for the highlighter
+                    if (highlighterRef.current) {
+                      // Nothing specific needed to dispose highlighter
+                      highlighterRef.current = null;
+                    }
+                  },
+                });
+              } catch (err) {
+                console.error('Error applying Shiki to Monaco:', err);
+              }
 
-              // Set theme based on current dark mode state from parent
-              const currentTheme = isDarkMode ? 'github-dark' : 'github-light';
-              monacoInstance.editor.setTheme(currentTheme);
+              // Apply the theme immediately after setup
+              monaco.editor.setTheme(isDarkMode ? 'github-dark' : 'github-light');
+            });
 
-              // Make sure the model uses JSX highlighting
-              const model = editor.getModel();
-              if (model) {
-                monacoInstance.editor.setModelLanguage(model, 'jsx');
+            // Handle scroll events to detect manual user scrolling
+            editor.onDidScrollChange((e) => {
+              const scrollTop = e.scrollTop;
+              // If there's a significant difference, consider it a manual scroll
+              if (Math.abs(scrollTop - lastScrollTopRef.current) > 30) {
+                userScrolledRef.current = true;
               }
-            } catch (error) {
-              console.warn('Shiki highlighter setup failed:', error);
-            }
+              lastScrollTopRef.current = scrollTop;
+            });
+          }}
+          onChange={(value) => {
+            // Nothing to do here as we've set readOnly to true
           }}
         />
       </div>
+      <div
+        style={{
+          visibility: activeView === 'data' ? 'visible' : 'hidden',
+          position: activeView === 'data' ? 'static' : 'absolute',
+          zIndex: activeView === 'data' ? 1 : 0,
+          height: '100%',
+          width: '100%',
+          top: 0,
+          left: 0,
+          padding: '16px',
+          overflow: 'auto',
+          backgroundColor: isDarkMode ? '#0d1117' : '#ffffff',
+        }}
+      >
+        {!isStreaming && (
+          <div className="data-container">
+            <h3 className="mb-4 text-xl font-medium">Database Information</h3>
+            <DatabaseListView
+              appCode={filesContent['/App.jsx']?.code || ''}
+              isDarkMode={isDarkMode}
+            />
+          </div>
+        )}
+      </div>
     </div>
   );
 };
