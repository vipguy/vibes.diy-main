import * as React from 'react';
import { combineClasses, defaultClasses, ImgGenClasses } from '../../utils/style-utils.js';
import { ImgGenFileDrop } from './ImgGenFileDrop.js';
import { useFireproof } from 'use-fireproof';

interface ImgGenPromptWaitingProps {
  /** Classname(s) to apply to the container */
  readonly className?: string;
  /** Custom CSS classes for styling component parts */
  readonly classes?: Partial<ImgGenClasses>;
  /** Database name to use for storing images */
  readonly database?: string;
  /** Enable debugging output */
  readonly debug?: boolean;
  /** Callback when files are uploaded via drag-drop or file picker */

  readonly onFilesUploaded?: (docId: string) => void;
}

// Component for when neither prompt nor _id is provided
export function ImgGenPromptWaiting({
  className,
  classes = defaultClasses,
  database,
  debug,
  onFilesUploaded,
}: ImgGenPromptWaitingProps) {
  const { database: db } = useFireproof(database || 'ImgGen');

  // Handle files being uploaded
  const handleFilesDropped = React.useCallback(
    async (files: File[]) => {
      if (!files.length) return;

      if (debug) {
        console.log(`[ImgGenPromptWaiting] Handling ${files.length} dropped files`);
      }

      try {
        // Create new document to hold the uploaded files
        const newDoc = {
          type: 'image',
          createdAt: new Date().toISOString(),
          _files: {} as Record<string, File>,
        };

        // Add files to the document with input file keys
        files.forEach((file, index) => {
          // Input files are prefixed with 'in' followed by a number
          // These are files uploaded by the user, not generated by AI
          newDoc._files[`in${index + 1}`] = file;
        });

        // Save the document to get an ID
        const result = await db.put(newDoc);

        if (debug) {
          console.log('[ImgGenPromptWaiting] Created document for uploads:', result.id);
        }

        // Notify parent component that files were uploaded
        if (onFilesUploaded && result.id) {
          onFilesUploaded(result.id);
        }
      } catch (error) {
        console.error('[ImgGenPromptWaiting] Error handling file upload:', error);
      }
    },
    [db, debug, onFilesUploaded]
  );

  return (
    <div
      className={combineClasses(
        'imggen-upload-waiting',
        className || '',
        classes?.uploadWaiting || ''
      )}
    >
      <div
        className="imggen-placeholder-content"
        style={{ marginBottom: '1rem', textAlign: 'center' }}
      >
        <h3 style={{ margin: '0 0 0.5rem 0', color: '#333' }}>Generate an Image</h3>
        <p style={{ margin: '0', color: '#666' }}>Enter a prompt or upload an image to edit</p>
      </div>

      <ImgGenFileDrop
        className={classes?.dropZone || ''}
        onFilesDropped={handleFilesDropped}
        isActive={true}
        maxFiles={10}
        debug={debug}
        addFilesMessage="Drop images here to upload (or click to browse)"
      />
    </div>
  );
}
